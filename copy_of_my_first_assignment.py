# -*- coding: utf-8 -*-
"""Copy of my first assignment

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zkHhx55pY-Ej-rlEVg1wIMtlRKg8F3fe
"""

#assignment first pwskills



# 1.explain the key feature of python that makeit a popular choice for programming.
# Key features of Python that make it popular

def explain_python_features():
    features = {
        "1. Simple and Easy to Learn": "Python has a simple syntax that mimics natural language, making it accessible for beginners.",
        "2. Interpreted Language": "Python is interpreted, meaning code is executed line-by-line, making debugging easier.",
        "3. Versatile": "Python is a general-purpose language, suitable for web development, data analysis, AI, scientific computing, and more.",
        "4. Large Standard Library": "Python's extensive standard library offers modules and packages for various tasks, reducing the need for external libraries.",
        "5. Cross-platform Compatibility": "Python runs on multiple platforms (Windows, macOS, Linux) without requiring modification.",
        "6. Strong Community Support": "Python has a large and active community, providing extensive documentation, tutorials, and third-party libraries.",
        "7. Open Source": "Python is free and open-source, encouraging collaboration and innovation."
    }

    for feature, description in features.items():
        print(f"{feature}:\n{description}\n")

# Run the function to display the features
explain_python_features()

#2.Describe the role of predefine the keyword in python & provide example of how they are used in a program.
Predefined keywords are the building blocks of Python programming. They help define the structure, control the flow, and perform specific operations in the program. Keywords are used to:
Define the control flow (e.g., 'if', 'else', 'while', 'for')
Manage the data types (e.g., 'True', 'False', 'None')
Handle exceptions (e.g., 'try', 'except', 'finally')
Define functions and classes (e.g., 'def', 'class')
Control loops and iteration (e.g., 'break', 'continue', 'return')
# Example program using predefined keywords in Python

def check_even_or_odd(number):  # 'def' keyword is used to define a function
    if number % 2 == 0:  # 'if' keyword is used for conditional statements
        return True  # 'return' keyword is used to return a value from a function
    else:  # 'else' keyword is used for alternative condition
        return False

def main():
    num = 10  # Assign a number to variable 'num'

    if check_even_or_odd(num):  # Call the function to check if the number is even
        print(f"{num} is Even")  # 'print' is a built-in function
    else:
        print(f"{num} is Odd")

if __name__ == "__main__":  # 'if', '__name__', and '__main__' are keywords and built-ins
    main()  # Call the main function

# Try and except keywords for exception handling
try:
    num = int(input("Enter a number: "))  # 'try' keyword is used to catch exceptions
    main()
except ValueError:  # 'except' keyword is used to handle specific exceptions
    print("Invalid input! Please enter an integer.")  # Handle the ValueError exception

3.compare & contrast mutable & immutable objects in python with example.
Mutable Objects
Definition: Mutable objects can have their values or state changed after they are created.
Examples: Lists, dictionaries, sets, and most user-defined objects.
Immutable Objects
Definition: Immutable objects cannot be changed once they are created. Any modification results in a new object being created.
Examples: Integers, floats, strings, tuples, and frozensets.
# Mutable Example: List
print("Mutable Example: List")
my_list = [1, 2, 3]
print("Original List:", my_list)

# Modify the list (mutate the object)
my_list.append(4)
print("Modified List:", my_list)

# Immutable Example: String
print("\nImmutable Example: String")
my_string = "Hello"
print("Original String:", my_string)

# Attempt to modify the string (immutable object)
new_string = my_string + " World"
print("New String (after modification):", new_string)
print("Original String (unchanged):", my_string)

# Mutable Example: Dictionary
print("\nMutable Example: Dictionary")
my_dict = {"name": "Alice", "age": 30}
print("Original Dictionary:", my_dict)

# Modify the dictionary (mutate the object)
my_dict["age"] = 31
print("Modified Dictionary:", my_dict)

# Immutable Example: Tuple
print("\nImmutable Example: Tuple")
my_tuple = (1, 2, 3)
print("Original Tuple:", my_tuple)

# Attempt to modify the tuple (immutable object)
# This will raise an error if uncommented:
# my_tuple[0] = 4  # TypeError: 'tuple' object does not support item assignment

# Instead, we can create a new tuple
new_tuple = my_tuple + (4,)
print("New Tuple (after modification):", new_tuple)
print("Original Tuple (unchanged):", my_tuple)

#4.Discuss the different type of operator in python & provide example of how they are used.
# Arithmetic Operators Example
a = 10
b = 3

print("Addition:", a + b)        # 10 + 3 = 13
print("Subtraction:", a - b)     # 10 - 3 = 7
print("Multiplication:", a * b)  # 10 * 3 = 30
print("Division:", a / b)        # 10 / 3 = 3.333...
print("Modulus:", a % b)         # 10 % 3 = 1
print("Exponentiation:", a ** b) # 10 ** 3 = 1000
print("Floor Division:", a // b) # 10 // 3 = 3
# Comparison Operators Example
x = 5
y = 10

print("Equal to:", x == y)       # False
print("Not equal to:", x != y)   # True
print("Greater than:", x > y)    # False
print("Less than:", x < y)       # True
print("Greater than or equal to:", x >= y)  # False
print("Less than or equal to:", x <= y)     # True
# Logical Operators Example
a = True
b = False

print("Logical AND:", a and b)   # False
print("Logical OR:", a or b)     # True
print("Logical NOT:", not a)     # False
# Assignment Operators Example
c = 5
c += 3  # c = c + 3
print("c after c += 3:", c)  # 8

c *= 2  # c = c * 2
print("c after c *= 2:", c)  # 16
# Bitwise Operators Example
a = 10  # In binary: 1010
b = 4   # In binary: 0100

print("Bitwise AND:", a & b)  # 0 (0000)
print("Bitwise OR:", a | b)   # 14 (1110)
print("Bitwise XOR:", a ^ b)  # 14 (1110)
print("Bitwise NOT (~a):", ~a)  # -11 (inverts bits)
print("Bitwise Left Shift:", a << 2)  # 40 (101000)
print("Bitwise Right Shift:", a >> 2) # 2 (10)
# Membership Operators Example
my_list = [1, 2, 3, 4, 5]

print("Is 3 in the list?", 3 in my_list)  # True
print("Is 10 not in the list?", 10 not in my_list)  # True
# Identity Operators Example
x = [1, 2, 3]
y = [1, 2, 3]
z = x

print("x is z:", x is z)  # True (z points to the same object as x)
print("x is y:", x is y)  # False (x and y are different objects with the same content)
print("x is not y:", x is not y)  # True (x and y are different objects)

#5.Explain the concept of type casting in python with example.
1. Implicit Type Casting
In implicit type casting, Python automatically converts the data type of an operand to another data type to prevent data loss.
# Implicit Type Casting Example
num_int = 10   # Integer
num_float = 20.5  # Float

# Adding integer and float
result = num_int + num_float

print("Result:", result)  # Result is implicitly converted to float
print("Type of result:", type(result))  # Output: <class 'float'>
2. Explicit Type Casting
int(): Converts a value to an integer.
float(): Converts a value to a float.
str(): Converts a value to a string.
list(): Converts a sequence (like a string or tuple) to a list.
tuple(): Converts a sequence to a tuple.
# Explicit Type Casting Example

# Convert float to integer
num_float = 15.8
num_int = int(num_float)  # Explicitly casting float to int
print("Float:", num_float)
print("Converted Integer:", num_int)

# Convert integer to string
num = 100
num_str = str(num)  # Explicitly casting integer to string
print("Integer:", num)
print("Converted String:", num_str)
print("Type of num_str:", type(num_str))  # Output: <class 'str'>

# Convert string to list
my_string = "Hello"
my_list = list(my_string)  # Explicitly casting string to list
print("String:", my_string)
print("Converted List:", my_list)

#6.How do conditional statement work in python? illustrate with example.

if condition1:
    # Block of code to execute if condition1 is True
elif condition2:
    # Block of code to execute if condition1 is False and condition2 is True
else:
    # Block of code to execute if both condition1 and condition2 are False
# Example 1: Simple if statement
age = 20

if age >= 18:
    print("You are an adult.")  # This block will execute if age is 18 or more
# Example 2: if, elif, and else statements
temperature = 30

if temperature > 35:
    print("It's a hot day.")
elif temperature >= 25:
    print("It's a warm day.")
elif temperature >= 15:
    print("It's a cool day.")
else:
    print("It's a cold day.")
# Example 3: Nested conditional statements
num = 10

if num > 0:
    print("The number is positive.")
    if num % 2 == 0:
        print("The number is even.")
    else:
        print("The number is odd.")
else:
    print("The number is zero or negative.")
# Example 4: Using conditional statements with user input
user_input = int(input("Enter a number: "))

if user_input > 0:
    print("You entered a positive number.")
elif user_input < 0:
    print("You entered a negative number.")
else:
    print("You entered zero.")

#7.Describe the different type of loops in python & their use case with example.

Types of Loops in Python
for Loop: Used for iterating over a sequence (such as a list, tuple, dictionary, set, or string) or other iterable objects. The for loop iterates over each item in the sequence and executes a block of code.

while Loop: Repeats a block of code as long as a specified condition is True. The condition is checked before the execution of the loop's body.

# Example 1: Iterating over a list using for loop
fruits = ["apple", "banana", "cherry"]

for fruit in fruits:
    print(fruit)
# Example 2: Iterating over a string using for loop
text = "Hello"

for char in text:
    print(char)
# Example 3: Using for loop with range
for i in range(5):
    print(i)
# Example 1: Simple while loop
count = 0

while count < 5:
    print("Count:", count)
    count += 1  # Increment count by 1
# Example 2: Using while loop to validate user input
password = ""

while password != "secret":
    password = input("Enter the password: ")

print("Access granted!")
# Example 3: Infinite while loop with break condition
while True:
    user_input = input("Enter 'exit' to quit: ")
    if user_input == 'exit':
        print("Exiting the loop.")
        break
    print("You entered:", user_input)

"""# New Section

# New Section
"""